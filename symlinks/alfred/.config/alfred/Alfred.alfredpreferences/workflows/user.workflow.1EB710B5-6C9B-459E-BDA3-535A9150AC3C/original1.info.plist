<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.farrell.pkgman.alfredworkflow</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>0376C25E-AF4F-4F76-B9BC-AD9E998CE4A3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>135ECB8C-557A-41D9-BF9A-6439A5EA949E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E928110A-9651-4404-BCF3-CCF77B35BB0B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>18B0C07D-A101-4267-B306-7925DE8A30C9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0A704625-29E6-450E-8F2C-8E4EC7179899</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>2F314483-5E76-477B-BB7E-574CA71131B4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>436DF03B-19A8-47CA-A8C6-27C31A52BB22</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>18B0C07D-A101-4267-B306-7925DE8A30C9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>348251C4-2B72-432F-A923-B082C6740DEA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>5F73C46B-877B-4BC6-A231-E72525BBCEB2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>67851157-5987-4B55-BDD9-90A9347C46A5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>6DA4E86D-6897-4E36-811B-EA9340364E48</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>8CEC2062-2484-4200-AE7A-BED7DA65E298</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>98FB2C27-091A-41A9-B3E1-109EA8523BBF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>A83F18D3-B34F-4AA7-A164-F19D8CE1C790</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>CDC59D6D-6D7A-48F9-BFC3-72DAF712EF19</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>D16CFAE9-21B6-44DD-965D-73EC1BE630C2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A6F75F15-2128-4002-A841-2872651A1640</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>D22F4CD1-A38D-4D9A-B910-E82A467AB0CC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>D8F2FDC0-B462-4C50-8A42-9E6A511395A8</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>E106723F-9932-431B-8250-64F2983338FC</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
		<key>F1559F42-7F85-4A26-A604-6E31BD686380</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Will Farrell</string>
	<key>description</key>
	<string>Package Repo Search</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Package Managers v1.42</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pkgman cachedb</string>
				<key>subtext</key>
				<string>Rebuild Package Manager Cached Databases</string>
				<key>text</key>
				<string>Force Repo DB Update</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>63</integer>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');

$cache = new Cache();

foreach($cache-&gt;dbs as $key =&gt; $url) {
	//$cache-&gt;get_db($key);
	$cache-&gt;update_db($key);
}</string>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Package Manager Databases Cached</string>
				<key>title</key>
				<string>Cache Complete</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>348251C4-2B72-432F-A923-B082C6740DEA</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>output</key>
				<integer>0</integer>
				<key>removeextension</key>
				<false/>
				<key>sticky</key>
				<false/>
				<key>text</key>
				<string>Package Manager Databases Cleared</string>
				<key>title</key>
				<string>Cache Deleted</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>0A704625-29E6-450E-8F2C-8E4EC7179899</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>63</integer>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');

$cache = new Cache();

$cache-&gt;clear();</string>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>18B0C07D-A101-4267-B306-7925DE8A30C9</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>pkgman cleardb</string>
				<key>subtext</key>
				<string>Remove all database caches</string>
				<key>text</key>
				<string>Clear Cache</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>bower</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_json('bower', $query, 'https://bower.herokuapp.com/packages/search/'.$query);

foreach($pkgs as $pkg) {
	$url = str_replace("git://", "https://", $pkg-&gt;url);
	$w-&gt;result( $pkg-&gt;url, $url, $pkg-&gt;name, $url, 'icon-cache/bower.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'bower', 'http://sindresorhus.com/bower-components/#!/search/'.$query, 'No components were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/bower.png' );
	}
	$w-&gt;result( 'bower-www', 'http://bower.io/', 'Go to the website', 'http://bower.io', 'icon-cache/bower.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search bower for "{query}"</string>
				<key>title</key>
				<string>Search bower</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>yo</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>//error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_db('yo');

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (strpos($plugin-&gt;description, $query) !== false) {
		return true;
	} 

	return false;
}

foreach($pkgs as $plugin) {
	if ($query &amp;&amp; search($plugin, $query)) {
		$title = $plugin-&gt;name;
		
		// add author to title
		if (isset($plugin-&gt;owner)) {
			$title .= " by " . $plugin-&gt;owner;
		}
		
		$w-&gt;result( $plugin-&gt;name, $plugin-&gt;website, $title, $plugin-&gt;description, 'icon-cache/yo.png' );
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'yo', 'http://yeoman.io/community-generators.html?q='.$query, 'No generators were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/yo.png' );
	}
	$w-&gt;result( 'yo-www', 'http://yoeman.io/', 'Go to the website', 'http://yoeman.io', 'icon-cache/yo.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Yeoman for "{query}"</string>
				<key>title</key>
				<string>Search Yeoman</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>6DA4E86D-6897-4E36-811B-EA9340364E48</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>grunt</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = (array) $cache-&gt;get_db('grunt')-&gt;aaData;

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (strpos($plugin-&gt;ds, $query) !== false) {
		return true;
	} 

	return false;
}

foreach($pkgs as $plugin) {
	if ($query &amp;&amp; search($plugin,  $query)) {
		$title = str_replace('grunt-', '', $plugin-&gt;name); // remove grunt- from title
	
		// add author to title
		if (isset($plugin-&gt;author)) {
			$title .= " by " . $plugin-&gt;author;
		}
		$url = 'https://www.npmjs.org/package/' . $plugin-&gt;name;
		
		//if (strpos($plugin-&gt;description, "DEPRECATED") !== false) { continue; } // skip DEPRECATED repos
		$w-&gt;result( $plugin-&gt;name, $url, $title, $plugin-&gt;ds, 'icon-cache/grunt.png' );
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'grunt', 'http://gruntjs.com/plugins/'.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/grunt.png' );
	}
	$w-&gt;result( 'grunt-www', 'http://gruntjs.com/', 'Go to the website', 'http://gruntjs.com', 'icon-cache/grunt.png' );
}

echo $w-&gt;toxml();
</string>
				<key>subtext</key>
				<string>Search Grunt for "{query}"</string>
				<key>title</key>
				<string>Search Grunt</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>gulp</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = (array) $cache-&gt;get_db('gulp')-&gt;results;

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (strpos($plugin-&gt;description, $query) !== false) {
		return true;
	} 

	return false;
}

foreach($pkgs as $plugin) {
	if (search($plugin, $query)) {
		$title = str_replace('gulp-', '', $plugin-&gt;name); // remove pulp- from title
		// add version to title
		if (isset($plugin-&gt;version)) {
			$title .= " v" . $plugin-&gt;version;
		}
			
		// add author to title
		if (isset($plugin-&gt;author)) {
			$title .= " by " . $plugin-&gt;author;
		}
		
		$w-&gt;result( $plugin-&gt;name, $plugin-&gt;homepage, $title, $plugin-&gt;description, 'icon-cache/gulp.png' );
	}
}


if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'gulp', 'http://gulpjs.com/plugins/#?q='.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/gulp.png' );
	}
	$w-&gt;result( 'gulp-www', 'http://gulpjs.com/', 'Go to the website', 'http://gulpjs.com', 'icon-cache/gulp.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search gulp for "{query}"</string>
				<key>title</key>
				<string>Search gulp</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>5F73C46B-877B-4BC6-A231-E72525BBCEB2</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>npm</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('npm', $query, 'https://www.npmjs.org/search?q='.$query, '/&lt;li class="search-result package"&gt;([\s\S]*?)&lt;\/div&gt;/i');

foreach($pkgs as $item) {
	preg_match('/&lt;h2&gt;(.*?)&lt;\/h2&gt;/i', $item, $matches);
	$title = strip_tags($matches[1]);
	
	//preg_match_all('/&lt;p[^&gt;]*&gt;([\s\S]*?)&lt;\/p&gt;/i', $item, $matches);
	preg_match_all('/&lt;p class="description"&gt;([\s\S]*?)&lt;\/p&gt;([\s\S]*?)by([\s\S]*?)&lt;\/span&gt;/i', $item, $matches);
 
 	$author = trim(strip_tags($matches[3][0]));
 	$version = trim(strip_tags($matches[2][0]));
 	$description = html_entity_decode(trim(strip_tags($matches[1][0])));
 
 	$w-&gt;result( $title, 'https://www.npmjs.org/package/'.$title, $title.' ~ v'.$version.' by '.$author, $description, 'icon-cache/npm.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'npm', 'https://www.npmjs.org/search?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/npm.png' );
	}
	$w-&gt;result( 'npm-www', 'https://www.npmjs.org/', 'Go to the website', 'https://www.npmjs.org', 'icon-cache/npm.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search npm for "{query}"</string>
				<key>title</key>
				<string>Search npm</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>E106723F-9932-431B-8250-64F2983338FC</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>composer</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('composer', $query, 'https://packagist.org/search/?search_query[query]='.$query, '/&lt;li data-url="(.*?)"&gt;([\s\S]*?)&lt;\/li&gt;/i', 2);

foreach($pkgs as $item) {
	preg_match('/&lt;a(.*?)&lt;\/a&gt;/i', $item, $matches);
	$title = strip_tags($matches[0]);
	
	preg_match('/&lt;p class="package-description"&gt;([\s\S]*?)&lt;\/p&gt;/i', $item, $matches);
	$details = strip_tags(substr($matches[1], 2));
	
	$w-&gt;result( $title, 'https://packagist.org/packages/'.$title, $title, $details, 'icon-cache/composer.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'composer', 'https://packagist.org/search/?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/composer.png' );
	}
	$w-&gt;result( 'composer-www', 'http://getcomposer.org/', 'Go to the website', 'http://getcomposer.org', 'icon-cache/composer.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Composer for "{query}"</string>
				<key>title</key>
				<string>Composer</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>67851157-5987-4B55-BDD9-90A9347C46A5</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>pear</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('pear', $query, 'http://pear.php.net/search.php?q='.$query, '/&lt;li&gt;([\s\S]*?)&lt;\/li&gt;/i');

array_shift($pkgs); // remove first item

foreach($pkgs as $item) {
	// name
	preg_match('/&lt;a(.*?)&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
	$title = strip_tags($matches[0]);
	
	// url
	$details = strip_tags(substr($item, strpos($item, ":")+2));
	
	$w-&gt;result( $title, 'http://pear.php.net/package/'.$title, $title, $details, 'icon-cache/pear.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'pear', 'http://pear.php.net/search.php?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/pear.png' );
	}
	$w-&gt;result( 'pear-www', 'http://pear.php.net/', 'Go to the website', 'http://pear.php.net', 'icon-cache/pear.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search PEAR for "{query}"</string>
				<key>title</key>
				<string>Search PEAR</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>A83F18D3-B34F-4AA7-A164-F19D8CE1C790</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>gems</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('gems', $query, 'http://rubygems.org/search?utf8=%E2%9C%93&amp;query='.$query, '/&lt;li&gt;([\s\S]*?)&lt;\/li&gt;/i');

foreach($pkgs as $item) {
	// name
	preg_match_all('/&lt;strong&gt;(.*?)&lt;\/strong&gt;/i', $item, $matches);
	if (isset($matches[1][1])) {
		$title = strip_tags($matches[1][1]);
	} else { continue; }
	
	// url
	preg_match('/&lt;a href="(.*?)"&gt;([\s\S]*?)&lt;\/a&gt;/i', $item, $matches);
	$url = $matches[1];
	
	$details = trim(strip_tags(substr($matches[2], strpos($matches[2], "&lt;/strong&gt;")+9)));
	
	if ($title &amp;&amp; $details) { // filter out nav links
		$w-&gt;result( $title, 'http://rubygems.org'.$url, $title, $details, 'icon-cache/gems.png' );
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'gems', 'http://rubygems.org/search?utf8=%E2%9C%93&amp;query='.$query, 'No gems were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/gems.png' );
	}
	$w-&gt;result( 'gems-www', 'http://rubygems.org/', 'Go to the website', 'http://rubygems.org', 'icon-cache/gems.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Ruby Gems for "{query}"</string>
				<key>title</key>
				<string>Search Ruby Gems</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>pypi</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>$min_query_length = 3;
error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

if (strlen($query) &gt;= $min_query_length) {
	$pkgs = $cache-&gt;get_query_regex('pypi', $query, 'https://pypi.python.org/pypi?%3Aaction=search&amp;term='.$query.'&amp;submit=search', '/&lt;tr class="(.*?)"&gt;([\s\S]*?)&lt;\/tr&gt;/i', 2);
	
	$count = 25;
	foreach($pkgs as $item) {
		// name
		preg_match('/&lt;a href="(.*?)"&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
		$title = str_replace("&amp;nbsp;", " ", strip_tags($matches[0]));
		$url = strip_tags($matches[1]);
		
		preg_match_all('/&lt;td&gt;([\s\S]*?)&lt;\/td&gt;/i', $item, $matches);
		$downloads = strip_tags($matches[1][1]);
		$details = strip_tags($matches[1][2]);
		
		$w-&gt;result( $title, 'https://pypi.python.org'.$url, $title."    ".$downloads, $details, 'icon-cache/pypi.png' );
		if (!--$count) { break; }
	}
	
	if ( count( $w-&gt;results() ) == 0) {
		if($query) {
			$w-&gt;result( 'pypi', 'https://pypi.python.org/pypi?%3Aaction=search&amp;term='.$query.'&amp;submit=search', 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/pypi.png' );
		}
		$w-&gt;result( 'pypi-www', 'https://pypi.python.org/', 'Go to the website', 'https://pypi.python.org', 'icon-cache/pypi.png' );
	}
} else {
	$w-&gt;result( 'pypi', null, 'Query too short', 'Due to drawbacks in the API, the minimum query length is '.$min_query_length.'.', 'icon-cache/pypi.png', 'no' );
	$w-&gt;result( 'pypi-www', 'https://pypi.python.org/', 'Go to the website', 'https://pypi.python.org', 'icon-cache/pypi.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Python for "{query}"</string>
				<key>title</key>
				<string>Search Python Packages</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>D22F4CD1-A38D-4D9A-B910-E82A467AB0CC</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>alcatraz</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_db('alcatraz');

function search($item, $query) {
	if (strpos($item-&gt;name, $query) !== false) {
		return true;
	} else if (strpos($item-&gt;description, $query) !== false) {
		return true;
	}
	return false;
}

foreach($pkgs-&gt;packages as $package ) {
	// plugins, color_scheme, project_templates, file_templates
	for( $i = 0; $i &lt; count($package); $i++ ) {
		
		if (search($package[$i], $query)) {
			$w-&gt;result( $package[$i]-&gt;url, $package[$i]-&gt;url, $package[$i]-&gt;name, $package[$i]-&gt;description, 'icon-cache/alcatraz.png' );
		}
	}
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'alcatraz', 'http://mneorr.github.io/Alcatraz/'.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/alcatraz.png' );
	}
	$w-&gt;result( 'alcatraz-www', 'http://mneorr.github.io/Alcatraz/', 'Go to the website', 'http://mneorr.github.io/Alcatraz', 'icon-cache/alcatraz.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Alcatraz for "{query}"</string>
				<key>title</key>
				<string>Search Alcatraz</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>98FB2C27-091A-41A9-B3E1-109EA8523BBF</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>cocoa</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>$apple_docs = false;

error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_db('cocoa');
if ($apple_docs) {
	$apple = $cache-&gt;get_db('apple');
	$pkgs = array_merge((array)$pkgs, (array)$apple);
}

function search($plugin, $query) {
	if (strpos($plugin-&gt;name, $query) !== false) {
		return true;
	} else if (isset($plugin-&gt;summary) &amp;&amp; strpos($plugin-&gt;summary, $query) !== false) {
		return true;
	}
	return false;
}

$count = 25;
foreach($pkgs as $library ) {
	if (search($library,  $query)) {
		$title = $library-&gt;name;
		if (isset($library-&gt;main_version)) { $title .= ' ('.$library-&gt;main_version.')'; }
		if (isset($library-&gt;user)) { $title .= ' ~ '.$library-&gt;user; }
		
		$url = (isset($library-&gt;url)) ? $library-&gt;url : $library-&gt;doc_url;
		$details = (isset($library-&gt;summary)) ? $library-&gt;summary : $library-&gt;framework;
		
		$icon = (isset($library-&gt;url)) ? 'xcode.png' : 'cocoa.png';
		$w-&gt;result( $library-&gt;name, $url, $title, $details, 'icon-cache/'.$icon );
		if (!--$count) { break; }
	}
}
/*
// query
if ($query) {
	$data = $w-&gt;request('http://cocoapods.org/search?query='.$query.'&amp;ids=20&amp;offset=0');
	$json = json_decode($data);
	//print_r($json);
	foreach($json-&gt;allocations as $group) {
		$name = $group[4];
		$html = $group[5];
		for($i = 0; $i &lt; count($name); $i++) {
			print_r($name[$i]);
			print_r($html[$i]);
			// name
			//preg_match('/&lt;a(.*?)&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
			//$title = strip_tags($matches[0]);
			
			// url
			//preg_match('/Homepage: &lt;a(.*?)&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
			//$details = strip_tags(substr($item, strpos($item, ":")+2));
			
			//$w-&gt;result( $title, 'http://pear.php.net/package/'.$title, $title, $details, 'cocoa.png' );
			
			$url = ''; // parsed grom $html[5]
			$w-&gt;result( $title, $url, $name[$i], '', 'cocoa.png' );
		}
	}
}*/

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'cocoa', 'http://cocoadocs.org/?q='.$query, 'No libraries were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/cocoa.png' );
	}
	$w-&gt;result( 'cocoa-www', 'http://cocoadocs.org/', 'Go to the website', 'http://http://cocoadocs.org', 'icon-cache/cocoa.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search CocoaPods for "{query}"</string>
				<key>title</key>
				<string>Search CocoaPods</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>brew</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searcing for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );


$pkgs = $cache-&gt;get_query_regex('brew', $query, 'http://braumeister.org/search/'.$query, '/&lt;div class="formula (odd|even)"&gt;([\s\S]*?)&lt;\/div&gt;/i', 2);

foreach($pkgs as $pkg) {
	// name
	preg_match('/&lt;a class="formula" href="(.*?)"&gt;(.*?)&lt;\/a&gt;/i', $pkg, $matches);
	$title = strip_tags($matches[0]);
	
	// version
	preg_match('/&lt;strong class="version spec-stable"&gt;([\s\S]*?)&lt;\/strong&gt;/i', $pkg, $matches);
	$version = trim(strip_tags($matches[0]));
	
	// url
	preg_match('/Homepage: &lt;a href="(.*?)"&gt;(.*?)&lt;\/a&gt;/i', $pkg, $matches);
	$details = strip_tags($matches[1]);
	
	$w-&gt;result( $title, 'http://braumeister.org/formula/'.$title, $title.' ~ '.$version, $details, 'icon-cache/brew.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'brew', 'http://braumeister.org/search/'.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/brew.png' );
	}
	$w-&gt;result( 'brew-www', 'http://braumeister.org/', 'Go to the website', 'http://braumeister.org', 'icon-cache/brew.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search homebrew for "{query}"</string>
				<key>title</key>
				<string>Search homebrew</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>apt-get</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('apt-get', $query, 'https://apps.ubuntu.com/cat/search/?q='.$query, '/&lt;tr&gt;([\s\S]*?)&lt;\/tr&gt;/i');


foreach($pkgs as $item) {
	preg_match('/&lt;p&gt;(.*?)&lt;\/p&gt;/i', $item, $matches);
	$name = trim(strip_tags($matches[1]));
	
	preg_match('/&lt;h3&gt;([\s\S]*?)&lt;\/h3&gt;/i', $item, $matches);
	$description = trim(strip_tags($matches[1]));

	$w-&gt;result( $name, 'https://apps.ubuntu.com/cat/applications/'.$name, $name, $description, 'icon-cache/apt-get.png' );
	//break;
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'apt-get', 'https://apps.ubuntu.com/cat/search/?q='.$query, 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/apt-get.png' );
	}
	$w-&gt;result( 'apt-get-www', 'https://apps.ubuntu.com/cat/', 'Go to the website', 'https://apps.ubuntu.com', 'icon-cache/apt-get.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search apt-get for "{query}"</string>
				<key>title</key>
				<string>Search apt-get</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>plusspaces</key>
				<false/>
				<key>url</key>
				<string>{query}</string>
				<key>utf8</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.openurl</string>
			<key>uid</key>
			<string>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>puppet</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('puppet', $query, 'https://forge.puppetlabs.com/modules?utf-8=✓&amp;sort=rank&amp;q='.$query, '/&lt;li class="clearfix "&gt;([\s\S]*?)&lt;\/li&gt;/i');

foreach($pkgs as $item) {
	preg_match('/&lt;h3&gt;([\s\S]*?)&lt;\/h3&gt;/i', $item, $matches);
	$name = trim(strip_tags($matches[1]));
	
	preg_match('/&lt;p&gt;([\s\S]*?)&lt;\/p&gt;/i', $item, $matches);
	$description = trim(strip_tags($matches[1]));
	
	preg_match('/Version([\s\S]*?)&lt;\/a&gt;/i', $item, $matches);
	$version = trim(strip_tags($matches[1]));

	$w-&gt;result( $name, 'https://forge.puppetlabs.com/'.$name, $name.' ~ v'.$version, $description, 'icon-cache/puppet.png' );
	//break;
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'puppet', 'https://apps.ubuntu.com/cat/search/?q='.$query, 'No modules were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/puppet.png' );
	}
	$w-&gt;result( 'puppet-www', 'https://forge.puppetlabs.com/', 'Go to the website', 'https://forge.puppetlabs.com', 'icon-cache/puppet.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search puppet for "{query}"</string>
				<key>title</key>
				<string>Search puppet</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>F1559F42-7F85-4A26-A604-6E31BD686380</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>rpm</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('rpm', $query, 'http://rpmfind.net/linux/rpm2html/search.php?query='.$query.'&amp;system=&amp;arch=', '/&lt;tr bgcolor=\'\'&gt;([\s\S]*?)&lt;\/tr&gt;/i');

foreach($pkgs as $item) {
	// title and url
	preg_match('/&lt;a href=[\'"](.*?)[\'"]&gt;(.*?)&lt;\/a&gt;/i', $item, $matches);
	$title = strip_tags($matches[2]);
	$url = strip_tags($matches[1]);
	
	preg_match_all('/&lt;td&gt;([\s\S]*?)&lt;\/td&gt;/i', $item, $matches);
	$dist = trim(strip_tags($matches[1][2]));
	$details = trim(strip_tags($matches[1][1]));
	
	$w-&gt;result( $title, $url, $title, $dist.' - '.$details, 'icon-cache/rpm.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'rpm', 'http://rpmfind.net/linux/rpm2html/search.php?query='.$query.'&amp;system=&amp;arch=', 'No packages were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/rpm.png' );
	}
	$w-&gt;result( 'rpm-www', 'http://rpmfind.net/', 'Go to the website', 'http://rpmfind.net', 'icon-cache/rpm.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search rpm for "{query}"</string>
				<key>title</key>
				<string>Search rpm</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>D8F2FDC0-B462-4C50-8A42-9E6A511395A8</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>maven</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_json('maven', $query, 'http://search.maven.org/solrsearch/select?q='.$query.'&amp;rows=10&amp;wt=json');

foreach($pkgs-&gt;response-&gt;docs as $item) {
	$title = $item-&gt;a.' ('.$item-&gt;latestVersion.')';
	$url = 'http://search.maven.org/#artifactdetails%7C'.$item-&gt;g.'%7C'.$item-&gt;a.'%7C'.$item-&gt;latestVersion.'%7C'.$item-&gt;p;
	$details = 'GroupId: '.$item-&gt;id;
	$w-&gt;result( $title, $url, $title, $details, 'icon-cache/maven.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'maven', 'http://mvnrepository.com/search.html?query='.$query, 'No libraries were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/maven.png' );
	}
	$w-&gt;result( 'maven-www', 'http://mvnrepository.com/', 'Go to the website', 'http://mvnrepository.com', 'icon-cache/maven.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Mavin for "{query}"</string>
				<key>title</key>
				<string>Search Mavin</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>2F314483-5E76-477B-BB7E-574CA71131B4</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>gradle</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
//$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_json('maven', $query, 'http://search.maven.org/solrsearch/select?q='.$query.'&amp;rows=10&amp;wt=json');

foreach($pkgs-&gt;response-&gt;docs as $item) {
	$title = $item-&gt;a.' ('.$item-&gt;latestVersion.')';
	$url = 'http://search.maven.org/#artifactdetails%7C'.$item-&gt;g.'%7C'.$item-&gt;a.'%7C'.$item-&gt;latestVersion.'%7C'.$item-&gt;p;
	$details = 'GroupId: '.$item-&gt;id;
	$w-&gt;result( $title, $url, $title, $details, 'icon-cache/gradle.png' );
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'gradle', 'http://mvnrepository.com/search.html?query='.$query, 'No libraries were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/gradle.png' );
	}
	$w-&gt;result( 'gradle-www', 'http://www.gradle.org/', 'Go to the website', 'http://www.gradle.org', 'icon-cache/gradle.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search Gradle for "{query}"</string>
				<key>title</key>
				<string>Search Gradle</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>CDC59D6D-6D7A-48F9-BFC3-72DAF712EF19</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>chef</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);

$min_query_length = 3; // use when loading in large DBs

require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w     = new Workflows();
$query = urlencode('{query}');

$cookbooks = $cache-&gt;get_query_json('chef', $query, "https://supermarket.getchef.com/api/v1/search?q={$query}");

/**
 * Checks a cookbook item from a Supermarket search to see if it matches the
 * given query
 *
 * @param  array  $cookbook The cookbook item being checked
 * @param  string $query    The string being searched for
 * @return boolean          True if it matches; false otherwise
 */
function search($cookbook, $query)
{
	$found = false;

	if (   strpos($cookbook-&gt;cookbook_name, $query) !== false
		|| strpos($cookbook-&gt;cookbook_description, $query) !== false
	) {
		$found = true;
	}

	return $found;
}

foreach ($cookbooks-&gt;items as $cookbook) {
	if (search($cookbook, $query)) {
		$title = $cookbook-&gt;cookbook_name;

		// add author to title
		if (isset($cookbook-&gt;cookbook_maintainer)) {
			$title .= " by {$cookbook-&gt;cookbook_maintainer}";
		}

		$w-&gt;result(
			$cookbook-&gt;cookbook_name,
			"https://supermarket.getchef.com/cookbooks/{$cookbook-&gt;cookbook_name}",
			$title,
			$cookbook-&gt;cookbook_description,
			'icon-cache/chef.png'
		);
	}
}

if (count($w-&gt;results()) == 0) {
	if ($query) {
		$w-&gt;result(
			'chef',
			"http://supermarket.getchef.com/cookbooks/{$query}",
			"No plugins were found that matched {$query}",
			'Click to see the results for yourself',
			'icon-cache/chef.png'
		);
	}

	$w-&gt;result(
		'chef-www',
		'http://supermarket.getchef.com/',
		'Go to the website',
		'http://supermarket.getchef.com',
		'icon-cache/chef.png'
	);
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search chef for "{query}"</string>
				<key>title</key>
				<string>Search Chef’s Supermarket</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>436DF03B-19A8-47CA-A8C6-27C31A52BB22</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>query="{query}";

id=$(echo $STR | cut -f1 -d|)
url=$(echo $STR | cut -f2 -d|)
str=$(echo $STR | cut -f3 -d|)

open $url</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>1A806429-BBAB-4227-B0C9-46E96CD3E492</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>docker</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>error_reporting(0);
require_once('code/cache.php');
require_once('code/workflows.php');

$cache = new Cache();
$w = new Workflows();
$query = urlencode( "{query}" );

$pkgs = $cache-&gt;get_query_regex('docker', $query, 'https://registry.hub.docker.com/search?q='.$query, '/(&lt;a href="\/u\/.*"&gt;&lt;div class="repo-list-item box"&gt;[\s\S]*?&lt;\/a&gt;)/i', 1); // requires parsing

//$count = 25;
foreach($pkgs as $pkg) {
	preg_match('/&lt;a href="(.*?)"&gt;[\s\S]*?&lt;h2&gt;([\s\S]*?)&lt;[\s\S]*&lt;\/h2&gt;([\s\S]*?)&lt;\/div&gt;/i', $pkg, $matches);
	$title = trim(preg_replace('/\s+/', '', $matches[2]));
	$url = 'https://registry.hub.docker.com'. trim(preg_replace('/\s+/', '', $matches[1]));
	$description = trim(preg_replace('/\s+/', ' ', $matches[3]));
	if (!$description || trim(preg_replace('/\s+/', '', $matches[3])) == '') {
		$description = $url;
	}

	preg_match('/&lt;span class="timesince" data-time=".*"&gt;\s?([\s\S]*?)\s?&lt;\/span&gt;/i', $pkg, $matches);
	$updated = trim(preg_replace('/\s+/', ' ', $matches[1]));

	$w-&gt;result( $title, $url, $title.' ~ '.$updated, $description, 'icon-cache/docker.png' );

	//if (!--$count) { break; }
}

if ( count( $w-&gt;results() ) == 0) {
	if($query) {
		$w-&gt;result( 'docker', 'https://registry.hub.docker.com/search?q='.$query, 'No plugins were found that matched "'.$query.'"', 'Click to see the results for yourself', 'icon-cache/docker.png' );
	}
	$w-&gt;result( 'docker-www', 'http://www.docker.io/', 'Go to the website', 'http://www.docker.io', 'icon-cache/docker.png' );
}

echo $w-&gt;toxml();</string>
				<key>subtext</key>
				<string>Search docker for "{query}"</string>
				<key>title</key>
				<string>Search docker</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>8CEC2062-2484-4200-AE7A-BED7DA65E298</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>STR="{query}";

id=$(echo $STR | cut -f1 -d|)
url=$(echo $STR | cut -f2 -d|)
str=$(echo $STR | cut -f3 -d|)

echo $id</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>135ECB8C-557A-41D9-BF9A-6439A5EA949E</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<true/>
				<key>clipboardtext</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>E928110A-9651-4404-BCF3-CCF77B35BB0B</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>127</integer>
				<key>script</key>
				<string>STR="{query}";

id=$(echo $STR | cut -f1 -d|)
url=$(echo $STR | cut -f2 -d|)
str=$(echo $STR | cut -f3 -d|)

echo $str</string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>D16CFAE9-21B6-44DD-965D-73EC1BE630C2</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<true/>
				<key>clipboardtext</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>A6F75F15-2128-4002-A841-2872651A1640</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>63</integer>
				<key>keyword</key>
				<string>raspbian</string>
				<key>queuedelaycustom</key>
				<integer>1</integer>
				<key>queuedelayimmediatelyinitially</key>
				<false/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for "{query}"</string>
				<key>script</key>
				<string>$query = &lt;&lt;&lt;EOD
{query}
EOD;

//error_reporting(0);
require_once('code/raspbian.php');

$repo = new Repo();
$repo-&gt;search($query);
echo $repo-&gt;xml();</string>
				<key>subtext</key>
				<string>Search Raspbian for "{query}"</string>
				<key>title</key>
				<string>Search Raspbian</string>
				<key>type</key>
				<integer>1</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>0376C25E-AF4F-4F76-B9BC-AD9E998CE4A3</string>
			<key>version</key>
			<integer>0</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>0376C25E-AF4F-4F76-B9BC-AD9E998CE4A3</key>
		<dict>
			<key>ypos</key>
			<real>2540</real>
		</dict>
		<key>0A704625-29E6-450E-8F2C-8E4EC7179899</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>135ECB8C-557A-41D9-BF9A-6439A5EA949E</key>
		<dict>
			<key>ypos</key>
			<real>2390</real>
		</dict>
		<key>18B0C07D-A101-4267-B306-7925DE8A30C9</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>1A806429-BBAB-4227-B0C9-46E96CD3E492</key>
		<dict>
			<key>ypos</key>
			<real>2240</real>
		</dict>
		<key>265DF548-7D96-4F94-AB0E-6AD26F31B4A1</key>
		<dict>
			<key>ypos</key>
			<real>1350</real>
		</dict>
		<key>2BECD5EE-3FDE-434C-8ADA-2FEAE34FBF34</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>2F314483-5E76-477B-BB7E-574CA71131B4</key>
		<dict>
			<key>ypos</key>
			<real>1980</real>
		</dict>
		<key>348251C4-2B72-432F-A923-B082C6740DEA</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>436DF03B-19A8-47CA-A8C6-27C31A52BB22</key>
		<dict>
			<key>ypos</key>
			<real>2180</real>
		</dict>
		<key>4F9B49BB-0F1E-4D72-A339-08C76E2D2C2A</key>
		<dict>
			<key>ypos</key>
			<real>130</real>
		</dict>
		<key>52E889A1-1A44-49FD-AEE9-5CBD1DC38AC4</key>
		<dict>
			<key>ypos</key>
			<real>10</real>
		</dict>
		<key>5F73C46B-877B-4BC6-A231-E72525BBCEB2</key>
		<dict>
			<key>ypos</key>
			<real>640</real>
		</dict>
		<key>67851157-5987-4B55-BDD9-90A9347C46A5</key>
		<dict>
			<key>ypos</key>
			<real>840</real>
		</dict>
		<key>6DA4E86D-6897-4E36-811B-EA9340364E48</key>
		<dict>
			<key>ypos</key>
			<real>440</real>
		</dict>
		<key>75D82ED5-8BFA-40BF-99AA-17D78AAB63D1</key>
		<dict>
			<key>ypos</key>
			<real>1640</real>
		</dict>
		<key>78A70680-7C8A-4CC4-AE71-A070E3E8CCD9</key>
		<dict>
			<key>ypos</key>
			<real>1450</real>
		</dict>
		<key>8CEC2062-2484-4200-AE7A-BED7DA65E298</key>
		<dict>
			<key>ypos</key>
			<real>2320</real>
		</dict>
		<key>98FB2C27-091A-41A9-B3E1-109EA8523BBF</key>
		<dict>
			<key>ypos</key>
			<real>1250</real>
		</dict>
		<key>A6F75F15-2128-4002-A841-2872651A1640</key>
		<dict>
			<key>ypos</key>
			<real>2510</real>
		</dict>
		<key>A83F18D3-B34F-4AA7-A164-F19D8CE1C790</key>
		<dict>
			<key>ypos</key>
			<real>950</real>
		</dict>
		<key>B9D9D59E-5B75-418E-8D5D-75EADD6D162A</key>
		<dict>
			<key>ypos</key>
			<real>1050</real>
		</dict>
		<key>C0190356-1EDC-4E5C-8187-9E3C4C69FBD1</key>
		<dict>
			<key>ypos</key>
			<real>540</real>
		</dict>
		<key>CDC59D6D-6D7A-48F9-BFC3-72DAF712EF19</key>
		<dict>
			<key>ypos</key>
			<real>2080</real>
		</dict>
		<key>D16CFAE9-21B6-44DD-965D-73EC1BE630C2</key>
		<dict>
			<key>ypos</key>
			<real>2510</real>
		</dict>
		<key>D22F4CD1-A38D-4D9A-B910-E82A467AB0CC</key>
		<dict>
			<key>ypos</key>
			<real>1150</real>
		</dict>
		<key>D882F2C5-CA0E-4D23-B1CC-28AC8AD1DB0E</key>
		<dict>
			<key>ypos</key>
			<real>1570</real>
		</dict>
		<key>D8F2FDC0-B462-4C50-8A42-9E6A511395A8</key>
		<dict>
			<key>ypos</key>
			<real>1880</real>
		</dict>
		<key>E106723F-9932-431B-8250-64F2983338FC</key>
		<dict>
			<key>ypos</key>
			<real>740</real>
		</dict>
		<key>E894CAC8-3680-4863-B8A5-EFCFD78B56F3</key>
		<dict>
			<key>ypos</key>
			<real>340</real>
		</dict>
		<key>E928110A-9651-4404-BCF3-CCF77B35BB0B</key>
		<dict>
			<key>ypos</key>
			<real>2390</real>
		</dict>
		<key>F1559F42-7F85-4A26-A604-6E31BD686380</key>
		<dict>
			<key>ypos</key>
			<real>1670</real>
		</dict>
	</dict>
	<key>webaddress</key>
	<string>github.com/willfarrell</string>
</dict>
</plist>
